<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>AstroIF</title>

  <!-- seu CSS principal -->
  <link rel="stylesheet" href="/css/style.css">

  <style>
    /* ===== Fundo: constelações + estrelas (sem interferir no layout) ===== */
    #constellations {
      position: fixed;
      inset: 0;
      width: 100%;
      height: 100%;
      z-index: -2;           /* atrás de tudo */
      pointer-events: none;  /* não bloqueia cliques */
    }

    .stars {
      position: fixed;
      inset: 0;
      width: 100%;
      height: 100%;
      z-index: -1;           /* um nível acima do canvas, ainda atrás do site */
      pointer-events: none;
      overflow: hidden;
    }

    .star {
      position: absolute;
      width: 2px;
      height: 2px;
      background: #fff;
      border-radius: 50%;
      opacity: 0.7;
      animation: floatStar linear infinite;
    }

    @keyframes floatStar {
      from { transform: translateY(0); opacity: 1; }
      to   { transform: translateY(-100vh); opacity: 0; }
    }
  </style>
</head>
<body>
  <!-- Fundo -->
  <canvas id="constellations"></canvas>
  <div class="stars"></div>

  <!-- Seu header/menu/logo permanecem como estão no seu /css/style.css -->
  <header>
    <img src="astroif.png" alt="Astro IF" class="header-logo" />
    <div class="dropdown">
      <button class="dropbtn">☰</button>
      <div class="dropdown-content">
        <a href="/">Home</a>
        <a href="/teste">Teste</a>
        <a href="/aluno/lst">Lista de Alunos</a>
      </div>
    </div>
  </header>

  <script>
    /* ===== Estrelas voando (CSS) ===== */
    const starsContainer = document.querySelector('.stars');
    for (let i = 0; i < 100; i++) {
      const star = document.createElement('div');
      star.className = 'star';

      const size = Math.random() * 2 + 1;               // 1–3 px
      star.style.width = `${size}px`;
      star.style.height = `${size}px`;

      star.style.left = `${Math.random() * 100}%`;
      star.style.top = `${Math.random() * 100 + 100}%`; // começa abaixo da viewport

      star.style.animationDuration = `${4 + Math.random() * 6}s`;
      star.style.animationDelay = `${Math.random() * 10}s`;

      starsContainer.appendChild(star);
    }

    /* ===== Constelações idênticas ao exemplo ===== */
    const canvas = document.getElementById('constellations');
    const ctx = canvas.getContext('2d');

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    resizeCanvas();

    const starPoints = [];
      for (let i = 0; i < 30; i++) {
      starPoints.push({
          x: Math.random() * canvas.width,
          y: Math.random() * (canvas.height * 0.7) + canvas.height * 0.3,
    });
}

    function drawConstellations() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.strokeStyle = 'rgba(255,255,255,0.2)';
      ctx.lineWidth = 0.5;

      for (let i = 0; i < starPoints.length; i++) {
        for (let j = i + 1; j < starPoints.length; j++) {
          const dx = starPoints[i].x - starPoints[j].x;
          const dy = starPoints[i].y - starPoints[j].y;
          const dist = Math.hypot(dx, dy);
          if (dist < 150) {
            ctx.beginPath();
            ctx.moveTo(starPoints[i].x, starPoints[i].y);
            ctx.lineTo(starPoints[j].x, starPoints[j].y);
            ctx.stroke();
          }
        }
      }
    }

    drawConstellations();

    window.addEventListener('resize', () => {
      resizeCanvas();
      // Recalcula os pontos para manter a mesma “densidade” após o resize
      starPoints.length = 0;
      for (let i = 0; i < 30; i++) {
        starPoints.push({
          x: Math.random() * canvas.width,
          y: Math.random() * (canvas.height / 2),
        });
      }
      drawConstellations();
    });
  </script>
</body>
</html>
